     1                                  %ifdef
     2                                      20. Two byte strings A and B are given. Obtain the string R by concatenating the elements of B in reverse order 
     3                                      and the even elements of A.
     4                                  %endif
     5                                  
     6                                  bits 32 ; assembling for the 32 bits architecture
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start        
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 02010303040206                  A db 2, 1, 3, 3, 4, 2, 6
    19                                          LA equ $ - A
    20 00000007 040507060201                    B db 4, 5, 7, 6, 2, 1
    21                                          LB equ $ - B
    22 0000000D <res 0000000D>                  R resb LA + LB
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 B906000000                      mov ECX, LB
    27 00000005 BE05000000                      mov ESI, LB - 1
    28 0000000A BF00000000                      mov EDI, 0
    29 0000000F E310                            jecxz final_1
    30                                          
    31                                          B_loop:
    32 00000011 8A86[07000000]                      mov AL, [B + ESI]
    33 00000017 8887[0D000000]                      mov [R + EDI], AL
    34 0000001D 4E                                  dec ESI
    35 0000001E 47                                  inc EDI
    36 0000001F E2F0                            loop B_loop
    37                                          
    38                                          final_1:
    39 00000021 B907000000                      mov ECX, LA
    40 00000026 BE00000000                      mov ESI, 0
    41 0000002B E323                            jecxz final_2
    42                                          
    43                                          A_loop:
    44 0000002D 8A86[00000000]                      mov AL, [A + ESI]
    45 00000033 88C3                                mov BL, AL
    46 00000035 6698                                cbw
    47 00000037 B702                                mov BH, 2
    48 00000039 F6FF                                idiv BH
    49 0000003B 88D8                                mov AL, BL
    50 0000003D 80FC00                              cmp AH, 0
    51 00000040 7405                                jz is_even
    52                                              return:
    53 00000042 46                                      inc ESI
    54 00000043 E2E8                            loop A_loop
    55 00000045 EB09                            jmp final_2
    56                                          
    57                                          is_even:
    58 00000047 8887[0D000000]                      mov [R + EDI], AL
    59 0000004D 47                                  inc EDI
    60 0000004E EBF2                                jmp return
    61                                          
    62                                          final_2:
    63 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
