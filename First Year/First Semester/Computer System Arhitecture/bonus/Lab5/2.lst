     1                                  %ifdef COMMENT
     2                                      2. Given a character string S, obtain the string D containing all special characters (!@#$%^&*) of the string S.
     3                                  %endif
     4                                  
     5                                  
     6                                  bits 32 ; assembling for the 32 bits architecture
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start        
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 2B3432614033242A                S db '+', '4', '2', 'a', '@', '3', '$', '*'
    19                                          L1 equ $ - S
    20 00000008 <res 00000008>                  D resb L1
    21 00000010 21402324255E262A                SC db '!', '@', '#', '$', '%', '^', '&', '*'
    22                                          L2 equ $ - SC
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 B908000000                      mov ECX, L1
    27 00000005 BE00000000                      mov ESI, 0
    28 0000000A BF00000000                      mov EDI, 0
    29                                          
    30                                          S_loop:
    31 0000000F 8A86[00000000]                      mov AL, [S + ESI]
    32                                              
    33 00000015 BB00000000                          mov EBX, 0
    34                                              SC_loop:
    35 0000001A 8A93[10000000]                          mov DL, [SC + EBX] 
    36 00000020 38D0                                    cmp AL, DL
    37 00000022 7408                                    jz comp 
    38 00000024 43                                      inc EBX
    39 00000025 83FB08                                  cmp EBX, L2
    40 00000028 75F0                                jnz SC_loop
    41 0000002A EB07                                jmp incr
    42                                              comp:
    43 0000002C 8887[08000000]                          mov [D + EDI], AL
    44 00000032 47                                      inc EDI
    45                                              incr:
    46 00000033 46                                      inc ESI
    47 00000034 E2D9                            loop S_loop
    48                                          
    49                                          final:
    50 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
