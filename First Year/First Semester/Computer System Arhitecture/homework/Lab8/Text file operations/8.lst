     1                                  %ifdef COMMENT
     2                                      8. A text file is given. Read the content of the file, determine the uppercase letter with the highest frequency and display the letter along with its frequency on the screen. The name of text file is defined in
     3                                  %endif
     4                                  
     5                                  bits 32
     6                                  
     7                                  global start        
     8                                  
     9                                  extern exit, fread, printf, fopen, fclose
    10                                  import exit msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fopen msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  
    16                                  segment data use32 class=data
    17 00000000 66696C65382E747874-             file_name db "file8.txt", 0 ; the name of the file
    17 00000009 00                 
    18 0000000A FFFFFFFF                        file_descriptor dd -1       ; the file descriptor returned by fopen in EAX
    19 0000000E 7200                            access_mode db "r", 0       ; the file access mode
    20                                          len equ 100                 ; we read 100 characters from the file at a time
    21 00000010 00<rept>                        text times (len + 1) db 0   ; the text read from the file at a time
    22 00000075 FF                              r db 0xFF
    23 00000076 00000000<rept>                  frequency_array times ("z" - "a" + 1) dd 0 ; the frequency array for the characters
    24 000000DE 546865207570706572-             format db "The uppercase letter with the highest frequency is %c, having the frequency %u", 0
    24 000000E7 63617365206C657474-
    24 000000F0 657220776974682074-
    24 000000F9 686520686967686573-
    24 00000102 74206672657175656E-
    24 0000010B 63792069732025632C-
    24 00000114 20686176696E672074-
    24 0000011D 686520667265717565-
    24 00000126 6E637920257500     
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; we call fopen() to open the file
    28                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    29                                          ; eax = fopen(file_name, access_mode)
    30 00000000 68[0E000000]                    push dword access_mode
    31 00000005 68[00000000]                    push dword file_name
    32 0000000A FF15[00000000]                  call [fopen]
    33 00000010 83C408                          add ESP, 4 * 2 ; clean-up the stack
    34                                          
    35 00000013 83F800                          cmp EAX, 0
    36 00000016 0F8494000000                    je open_error
    37                                          
    38 0000001C A3[0A000000]                    mov [file_descriptor], EAX ; we save the file descriptor
    39                                          
    40                                          
    41                                          read_from_file:
    42                                              ; we read the text from file using fread()
    43                                              ; after the fread() call, EAX will contain the number of chars we have read 
    44                                              ; eax = fread(text, 1, len, file_descriptor)
    45 00000021 FF35[0A000000]                      push dword [file_descriptor]
    46 00000027 6A64                                push dword len
    47 00000029 6A01                                push dword 1
    48 0000002B 68[10000000]                        push dword text
    49 00000030 FF15[00000000]                      call [fread]
    50 00000036 83C410                              add ESP, 4 * 4 ; clean-up the stack
    51                                              
    52 00000039 83F800                              cmp EAX, 0
    53 0000003C 742C                                je reading_done
    54                                                  
    55 0000003E 89C3                                mov EBX, EAX   
    56 00000040 BE[10000000]                        mov ESI, text ; the source array
    57                                              text_loop:
    58 00000045 B800000000                              mov EAX, 0
    59 0000004A AC                                      LODSB ; load the current byte character from <DS:ESI> into AL
    60 0000004B 3C41                                    cmp AL, 'A'
    61 0000004D 7C0F                                    jl continue ; if the current character is not uppercase
    62 0000004F 3C5A                                    cmp AL, 'Z' ; if the current character is not uppercase
    63 00000051 7F0B                                    jg continue
    64                                                  
    65                                                  ; now we are sure that the actual character (stored in AL) is uppercase
    66 00000053 83E841                                  sub EAX, 'A'
    67 00000056 830485[76000000]01                      add dword [EAX*4 + frequency_array], 1 ; offset specification formula, increase the frequency of the character
    68                                                  
    69                                                  continue:
    70                                                  
    71 0000005E 83EB01                                  sub EBX, 1
    72 00000061 83FB00                                  cmp EBX, 0
    73 00000064 74BB                                    je read_from_file
    74 00000066 EBDD                                jmp text_loop
    75 00000068 EBB7                            jmp read_from_file
    76                                          
    77                                          reading_done:
    78                                          
    79 0000006A B91A000000                      mov ECX, "z" - "a" + 1 ; the length of the frequency array
    80 0000006F BB00000000                      mov EBX, 0 ; the max frequency
    81 00000074 BE[76000000]                    mov ESI, frequency_array
    82 00000079 BA00000000                      mov EDX, 0 ; the uppercase character with the highest frequency
    83                                          
    84                                          find_max_frequency:
    85 0000007E AD                                  LODSD ; EAX <- the current frequency
    86 0000007F 39C3                                CMP EBX, EAX
    87 00000081 7F0C                                jg continue_searching
    88                                              
    89 00000083 89C3                                mov EBX, EAX
    90 00000085 BA5A000000                          mov EDX, "Z"
    91 0000008A 29CA                                sub EDX, ECX
    92 0000008C 83C201                              add EDX, 1
    93                                              
    94                                              continue_searching:
    95 0000008F E2ED                            loop find_max_frequency
    96                                          
    97 00000091 53                              push dword EBX ; the max frequency
    98 00000092 52                              push dword EDX ; the uppercase character with the max frequency
    99 00000093 68[DE000000]                    push format
   100 00000098 FF15[00000000]                  call [printf]
   101 0000009E 83C40C                          add esp, 4 * 3 ; clean-up the stack
   102                                          
   103                                          ; we call fclose() to close the file
   104                                          ; fclose(file_descriptor)
   105 000000A1 FF35[0A000000]                  push dword [file_descriptor]
   106 000000A7 FF15[00000000]                  call [fclose]
   107 000000AD 83C404                          add ESP, 4 * 1 ; clean-up the stack
   108                                          
   109                                          open_error:
   110                                          
   111 000000B0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   112 000000B2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
