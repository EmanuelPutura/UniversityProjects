     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;Exercise 24:
    13                                  ;Given the doubleword M, compute the doubleword MNew as follows:
    14                                  ;the bits 0-3 a of MNew are the same as the bits 5-8 a of M. +
    15                                  ;the bits 4-7 a of MNew have the value 1 +
    16                                  ;the bits 27-31 a of MNew have the value 0 +
    17                                  ;the bits 8-26 of MNew are the same as the bits 8-26 a of M.
    18                                  
    19                                  segment data use32 class=data
    20                                      ; ...
    21 00000000 75535727                    M dd 100111010101110101001101110101b
    22 00000004 00000000                    MNew dd 0
    23 00000008 0A                          a db 10
    24                                      L1 equ $ - $$
    25                                      L2 equ $$
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ... 00000000000000000000000000000000
    30                                          ;mov eax, dword DS:[00401008]
    31                                          ;mov eax, 3-2
    32                                          
    33 00000000 B809000000                      mov eax, L1
    34 00000005 B9[00000000]                    mov ecx, L2
    35 0000000A BB00000000                      mov ebx, 0 ; we compute the result in ebx
    36                                  
    37 0000000F A1[00000000]                    mov eax, [M] ; we isolate bits 5-8 of M
    38 00000014 25E0010000                      and eax, 00000000000000000000000111100000b
    39 00000019 B105                            mov cl, 5
    40 0000001B D3C8                            ror eax, cl ; we rotate 5 positions to the right
    41 0000001D 09C3                            or ebx, eax ; we put the bits into the result
    42                                  
    43 0000001F 81CBF0000000                    or ebx, 00000000000000000000000011110000b ; we force the value of bits 4-7 of the result to the value 1
    44                                          
    45 00000025 81E3FFFFFF07                    and ebx, 00000111111111111111111111111111b; we force the value of bits 27-31 of the result to the value 0
    46                                  
    47 0000002B A1[00000000]                    mov eax, [M] ; we isolate bits 8-26 of M
    48 00000030 2500FFFF07                      and eax, 00000111111111111111111100000000b
    49 00000035 09C3                            or ebx, eax ; we put the bits into the result
    50                                  
    51 00000037 891D[04000000]                  mov [MNew], ebx ; we move the result from the register to the result variable
    52                                  
    53                                          ; exit(0)
    54 0000003D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 0000003F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
