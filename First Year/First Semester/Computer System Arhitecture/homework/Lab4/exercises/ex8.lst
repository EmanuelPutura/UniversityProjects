     1                                  %ifdef COMMENT
     2                                      Given the words A and B, compute the byte C as follows:
     3                                      the bits 0-5 are the same as the bits 5-10 of A
     4                                      the bits 6-7 are the same as the bits 1-2 of B.
     5                                      Compute the doubleword D as follows:
     6                                      the bits 8-15 are the same as the bits of C
     7                                      the bits 0-7 are the same as the bits 8-15 of B
     8                                      the bits 24-31 are the same as the bits 0-7 of A
     9                                      the bits 16-23 are the same as the bits 8-15 of A.
    10                                  %endif
    11                                  
    12                                  bits 32 ; assembling for the 32 bits architecture
    13                                  
    14                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    15                                  global start        
    16                                  
    17                                  ; declare external functions needed by our program
    18                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    19                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    20                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    21                                  
    22                                  ; our data is declared here (the variables needed by our program)
    23                                  segment data use32 class=data
    24 00000000 E5D2                            A dw 1101001011100101b ; D2E5h
    25 00000002 2F2C                            B dw 0010110000101111b ; 2C2F
    26 00000004 <res 00000001>                  C resb 1 ; we reserve one byte
    27 00000005 <res 00000004>                  D resw 2 ; we reserve two words, so basically we reserve one doubleword
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31 00000000 B300                            mov BL, 0 ; we compute C in BL
    32                                          
    33 00000002 66A1[00000000]                  mov AX, word [A]
    34 00000008 6625E007                        and AX, 0000011111100000b ; we isolate the bits 5-10 of A
    35 0000000C B105                            mov CL, 5
    36 0000000E 66D3C8                          ror AX, CL ; AX <- 0000000000010111b (we rotate 5 positions to the right)
    37 00000011 08C3                            or BL, AL ; BL <- 00010111b
    38                                          
    39 00000013 66A1[02000000]                  mov AX, word [B]
    40 00000019 2406                            and AL, 00000110b ; we isolate the bits 1-2 of B
    41 0000001B B105                            mov CL, 5
    42 0000001D D2C0                            rol AL, CL ; AL <- 11000000b (we rotate 5 positions to the left)
    43 0000001F 08C3                            or BL, AL ; BL <- 11010111b = D7h
    44                                          
    45 00000021 881D[04000000]                  mov byte [C], BL ; we move the result into C. So we have that C = 11010111b = D7h
    46                                          
    47 00000027 BB00000000                      mov EBX, 0 ; we compute D in EBX
    48                                          
    49 0000002C B800000000                      mov EAX, 0
    50 00000031 A0[04000000]                    mov AL, byte [C] ; AL <- C => EAX = [C] = 00000000000000000000000011010111b
    51 00000036 B108                            mov CL, 8
    52 00000038 D3C0                            rol EAX, CL ; EAX <- 00000000000000001101011100000000b (we rotate 8 positions to the left)
    53 0000003A 09C3                            or EBX, EAX ; EBX <- 00000000000000001101011100000000b
    54                                          
    55 0000003C 66A1[02000000]                  mov AX, word [B] ; AX <- 0010110000101111b
    56 00000042 662500FF                        and AX, 1111111100000000b ; we isolate the bits 8-15 of B
    57 00000046 B108                            mov CL, 8
    58 00000048 66D3C8                          ror AX, CL ; AX <- 0000000000101100b (we rotate 8 positions to the right)
    59 0000004B 08C3                            or BL, AL ; BL <- 00101100b => EBX <- 00000000000000001101011100101100b
    60                                   
    61 0000004D B800000000                      mov EAX, 0
    62 00000052 66A1[00000000]                  mov AX, word [A] ; AX <- 1101001011100101b
    63 00000058 B400                            mov AH, 0 ; the bits 0-7 of AX are the bits of AL => we isolate the bits 0-7 of A
    64 0000005A B118                            mov CL, 24
    65 0000005C D3C0                            rol EAX, CL ; EAX <- 11100101000000000000000000000000b (we rotate 24 positions to the left)
    66 0000005E 09C3                            or EBX, EAX ; EBX <- 11100101000000001101011100101100b
    67                                          
    68 00000060 B800000000                      mov EAX, 0
    69 00000065 66A1[00000000]                  mov AX, word [A] ; AX <- 1101001011100101b
    70 0000006B B000                            mov AL, 0 ; the bits 8-15 of AX are the bits of AH => we isolate the bits 8-15 of A
    71 0000006D B108                            mov CL, 8
    72 0000006F D3C0                            rol EAX, CL ; EAX <- 00000000000000001101001000000000b (we rotate 8 positions to the left)
    73 00000071 09C3                            or EBX, EAX ; EBX <- 11100101110100101101011100101100b = E5D2D72Ch
    74                                          
    75 00000073 891D[05000000]                  mov dword [D], EBX ; We move the result into D. So we have 
    76                                                                      ; that D = 11100101110100101101011100101100b = E5D2D72Ch
    77                                                                      ; we also have that C = 11010111b = D7h
    78                                          
    79 00000079 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    80 0000007B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
