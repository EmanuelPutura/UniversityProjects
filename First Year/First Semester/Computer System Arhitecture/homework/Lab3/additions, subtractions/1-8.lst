     1                                  %ifdef COMMENT
     2                                      a - byte, b - word, c - double word, d - qword - Unsigned representation
     3                                      N = (a + b - d) + (a - b - d)
     4                                      a = 200, b = 50, d = 100 =>
     5                                          => N = 150 - 50 =>
     6                                          => N = 100 (qword)
     7                                  %endif
     8                                  
     9                                  bits 32 ; assembling for the 32 bits architecture
    10                                  
    11                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    12                                  global start        
    13                                  
    14                                  ; declare external functions needed by our program
    15                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    16                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    17                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    18                                  
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21 00000000 C8                              a db 200
    22 00000001 3200                            b dw 50
    23 00000003 6400000000000000                d dq 100
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27 00000000 A0[00000000]                    mov AL, byte [a] ; AL = a
    28 00000005 B400                            mov AH, 0 ; unsigned conversion from AL to AX
    29 00000007 660305[01000000]                add AX, word [b] ; AX = a + b
    30                                          
    31 0000000E 66BA0000                        mov DX, 0 ; unsigned conversion from AX to DX:AX
    32                                          
    33 00000012 6652                            push DX
    34 00000014 6650                            push AX
    35 00000016 58                              pop EAX ; EAX = a + b
    36                                          
    37 00000017 BA00000000                      mov EDX, 0 ; unsigned conversion from EAX to EDX:EAX
    38 0000001C 2B05[03000000]                  sub EAX, dword [d]
    39 00000022 1B15[07000000]                  sbb EDX, dword [d + 4] ; EDX:EAX = a + b - d 
    40                                          
    41 00000028 8A1D[00000000]                  mov BL, byte [a] ; BL = a
    42 0000002E B700                            mov BH, 0 ; unisigned conversion from BL to BX
    43 00000030 662B1D[01000000]                sub BX, word [b] ; BX = a - b
    44                                          
    45 00000037 66B90000                        mov CX, 0 ; unsigned conversion from BX to CX:BX
    46                                          
    47 0000003B 6651                            push CX
    48 0000003D 6653                            push BX 
    49 0000003F 5B                              pop EBX ; EBX = a - b
    50                                          
    51 00000040 B900000000                      mov ECX, 0 ; unsigned conversion from EBX to ECX:EBX
    52 00000045 2B1D[03000000]                  sub EBX, dword [d]
    53 0000004B 1B0D[07000000]                  sbb ECX, dword [d + 4] ; ECX:EBX = a - b - d
    54                                          
    55 00000051 01D8                            add EAX, EBX
    56 00000053 11CA                            adc EDX, ECX ; EDX:EAX = (a + b - d) + (a - b - d)
    57                                          
    58 00000055 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000057 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
