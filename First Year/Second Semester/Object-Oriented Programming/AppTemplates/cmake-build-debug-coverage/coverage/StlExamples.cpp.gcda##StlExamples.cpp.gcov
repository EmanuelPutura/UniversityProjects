        -:    0:Source:D:/Informatica/UBB Sem. 2/OOP/AppTemplates/examples/stl_examples/StlExamples.cpp
        -:    0:Graph:D:\Informatica\UBB Sem. 2\OOP\AppTemplates\cmake-build-debug-coverage\CMakeFiles\AppTemplates.dir\examples\stl_examples\StlExamples.cpp.gcno
        -:    0:Data:D:\Informatica\UBB Sem. 2\OOP\AppTemplates\cmake-build-debug-coverage\CMakeFiles\AppTemplates.dir\examples\stl_examples\StlExamples.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Emanuel on 04.04.2021.
        -:    3://
        -:    4:
        -:    5:#include "StlExamples.h"
        -:    6:
        -:    7:#include <iostream>
        -:    8:#include <assert.h>
        -:    9:#include <vector>
        -:   10:#include <algorithm>
        -:   11:
        1:   12:void TestSTL::testShort() {
        2:   13:    std::vector<int> vector_ints;
        1:   13-block  0
    $$$$$:   13-block  1
        -:   14:
        1:   15:    vector_ints.push_back(4);
    $$$$$:   15-block  0
        1:   16:    vector_ints.push_back(5);
        1:   16-block  0
    $$$$$:   16-block  1
        1:   17:    vector_ints.push_back(3);
        1:   17-block  0
    $$$$$:   17-block  1
        1:   18:    vector_ints.push_back(8);
        1:   18-block  0
    $$$$$:   18-block  1
        1:   19:    vector_ints.push_back(10);
        1:   19-block  0
    $$$$$:   19-block  1
        -:   20:
        1:   21:    int index = 0;
        6:   22:    for (std::vector<int>::iterator it = vector_ints.begin(); it != vector_ints.end(); ++it) {
        1:   22-block  0
        6:   22-block  1
        5:   23:        std::cout << *it << ' ' << vector_ints[index] << '\n';
        5:   23-block  0
        5:   23-block  1
        5:   23-block  2
        5:   23-block  3
        5:   24:        index++;
        5:   24-block  0
        -:   25:    }
        1:   26:    std::cout << "-----------------------------------------------------\n";
        1:   26-block  0
        -:   27:
        1:   28:    vector_ints[1] = 2;
        1:   28-block  0
        1:   29:    index = 0;
        6:   30:    for (std::vector<int>::iterator it = vector_ints.begin(); it != vector_ints.end(); ++it) {
        6:   30-block  0
        5:   31:        std::cout << *it << ' ' << vector_ints[index] << '\n';
        5:   31-block  0
        5:   31-block  1
        5:   31-block  2
        5:   31-block  3
        5:   32:        index++;
        5:   32-block  0
        -:   33:    }
        1:   34:    std::cout << "-----------------------------------------------------\n";
        1:   34-block  0
        -:   35:
        1:   36:    std::cout << "Let's make some erases!\n";
        1:   36-block  0
        1:   37:    std::cout << vector_ints.size() << ' ' << vector_ints[1] << ' ' << vector_ints[2] << '\n';
        1:   37-block  0
        1:   37-block  1
        1:   37-block  2
        1:   37-block  3
        1:   37-block  4
        1:   37-block  5
        1:   38:    vector_ints.erase(vector_ints.begin() + 1);
        1:   38-block  0
    $$$$$:   38-block  1
    $$$$$:   38-block  2
    $$$$$:   38-block  3
        1:   39:    std::cout << vector_ints.size() << ' ' << vector_ints[1]  << '\n';
        1:   39-block  0
        1:   39-block  1
        1:   39-block  2
        1:   39-block  3
        1:   40:    vector_ints.push_back(3);
        1:   40-block  0
    $$$$$:   40-block  1
        1:   41:    std::cout << "-----------------------------------------------------\n";
        1:   41-block  0
        -:   42:
        1:   43:    std::cout << "Now let's play a little with find()\n";
        1:   43-block  0
        1:   44:    std::cout << "Element 3 found on position: " << std::find(vector_ints.begin(), vector_ints.end(), 3) - vector_ints.begin() << '\n';
        1:   44-block  0
        1:   44-block  1
        1:   44-block  2
        1:   44-block  3
    $$$$$:   44-block  4
    $$$$$:   44-block  5
    $$$$$:   44-block  6
        1:   45:    std::cout << "-----------------------------------------------------\n";
        1:   45-block  0
        -:   46:
        1:   47:    std::cout << "It's time for find_if()\n";
        1:   47-block  0
        1:   48:    std::cout << "Attempt to find element 3 position: ";
        1:   48-block  0
        1:   49:    std::cout << std::find_if(vector_ints.begin(), vector_ints.end(), [](const auto& element) { return element == 3; }) - vector_ints.begin();
        1:   49-block  0
        1:   49-block  1
    $$$$$:   49-block  2
    $$$$$:   49-block  3
    $$$$$:   49-block  4
        1:   50:    std::cout << "\n-----------------------------------------------------\n";
        1:   50-block  0
        -:   51:
        1:   52:    std::cout << "Now let's print the elements, but in a cool way ;)\n";
        1:   52-block  0
        1:   53:    std::for_each(vector_ints.begin(), vector_ints.end(), [](const auto& element) { std::cout << element << ' '; });
        1:   53-block  0
    $$$$$:   53-block  1
        1:   54:    std::cout << "\n-----------------------------------------------------\n";
        1:   54-block  0
        -:   55:
        1:   56:    std::cout << "Time for count_if(). Hurray!\n";
        1:   56-block  0
        1:   57:    std::cout << "The number of odd elements is: ";
        1:   57-block  0
        1:   58:    std::cout << std::count_if(vector_ints.begin(), vector_ints.end(), [](const auto& element) { return element % 2 == 1; });
        1:   58-block  0
        1:   58-block  1
    $$$$$:   58-block  2
        1:   59:    std::cout << "\n-----------------------------------------------------\n";
        1:   59-block  0
        -:   60:
        1:   61:    std::cout << "Alert! Serious stuff is going on: copy_if()\n";
        1:   61-block  0
        1:   62:    std::cout << "Let's build a new vector that contains only the even numbers: ";
        1:   62-block  0
        2:   63:    std::vector<int> even_nos(3);
        1:   63-block  0
        1:   63-block  1
    $$$$$:   63-block  2
    $$$$$:   63-block  3
        1:   64:    std::copy_if(vector_ints.begin(), vector_ints.end(), even_nos.begin(), [](const auto& element) { return element % 2 == 0; });
        1:   65:    std::for_each(even_nos.begin(), even_nos.end(), [](const auto& element) { std::cout << element << ' '; });
    $$$$$:   65-block  0
        1:   66:    std::cout << "\n-----------------------------------------------------\n";
        1:   66-block  0
        1:   67:}
        -:   68:
        1:   69:void TestSTL::testSTLAll() {
        1:   70:    testShort();
        1:   70-block  0
        1:   71:}
