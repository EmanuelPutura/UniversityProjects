        -:    0:Source:D:/Informatica/UBB Sem. 2/OOP/a45-916-Putura-Emanuel-Vasile/presentation/OptionConsoleUI/OptionConsoleUI.cpp
        -:    0:Graph:D:\Informatica\UBB Sem. 2\OOP\a45-916-Putura-Emanuel-Vasile\cmake-build-debug-coverage\CMakeFiles\a45_916_Putura_Emanuel_Vasile.dir\presentation\OptionConsoleUI\OptionConsoleUI.cpp.gcno
        -:    0:Data:D:\Informatica\UBB Sem. 2\OOP\a45-916-Putura-Emanuel-Vasile\cmake-build-debug-coverage\CMakeFiles\a45_916_Putura_Emanuel_Vasile.dir\presentation\OptionConsoleUI\OptionConsoleUI.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Emanuel on 23.03.2021.
        -:    3://
        -:    4:
        -:    5:#include "OptionConsoleUI.h"
        -:    6:
        -:    7:#include <iostream>
        -:    8:
        1:    9:void OptionConsoleUI::menu() const {
        2:   10:    TextTable table {2};
        1:   10-block  0
        1:   10-block  1
    $$$$$:   10-block  2
        1:   11:    table.addHeader(2, "COMMAND", "COMMAND DESCRIPTION");
        1:   12:    table.addRow(2, "admin", "open the application in admin mode");
        1:   12-block  0
        1:   13:    table.addRow(2, "user", "open the application in user mode");
        1:   13-block  0
        1:   14:    table.addRow(2, "exit", "exit the application");
        1:   14-block  0
        1:   15:    std::cout << table << '\n';
        1:   15-block  0
        1:   15-block  1
        1:   16:}
        -:   17:
        1:   18:int OptionConsoleUI::run() {
        1:   19:    bool running = true;
        1:   19-block  0
        2:   20:    while(running) {
        2:   20-block  0
        1:   20-block  1
        1:   21:        menu();
        1:   21-block  0
        1:   22:        int command = mapCommand(getCommand());
        1:   22-block  0
    $$$$$:   22-block  1
        -:   23:
        1:   24:        switch (command) {
    #####:   25:            case 0:
        -:   26:                // admin case
    #####:   27:                exit_code = 1;
    #####:   28:                running = false;
    #####:   29:                break;
    %%%%%:   29-block  0
    #####:   30:            case 1:
        -:   31:                // user case
    #####:   32:                exit_code = 2;
    #####:   33:                running = false;
    #####:   34:                break;
    %%%%%:   34-block  0
        1:   35:            case 2:
        -:   36:                // exit case
        1:   37:                running = false;
        1:   38:                break;
        1:   38-block  0
    #####:   39:            default:
    #####:   40:                std::cout << "Invalid command.\n";
    %%%%%:   40-block  0
    #####:   41:                break;
        -:   42:        }
        -:   43:    }
        1:   44:    return 0;
        1:   44-block  0
        1:   44-block  1
        -:   45:}
        -:   46:
        1:   47:int OptionConsoleUI::mapCommand(const std::string &command) const {
        5:   48:    std::string commands[] = {"admin", "user", "exit"};
        1:   48-block  0
        1:   48-block  1
        1:   48-block  2
        1:   48-block  3
        1:   48-block  4
        4:   48-block  5
        3:   48-block  6
    $$$$$:   48-block  7
    $$$$$:   48-block  8
    $$$$$:   48-block  9
    $$$$$:   48-block 10
    $$$$$:   48-block 11
    $$$$$:   48-block 12
    $$$$$:   48-block 13
    $$$$$:   48-block 14
        1:   49:    int int_commands[] = {0, 1, 2};
        -:   50:
        3:   51:    for (size_t i = 0; i < 3; ++i)
        3:   51-block  0
        2:   51-block  1
        3:   52:        if (command == commands[i]) return int_commands[i];
        3:   52-block  0
        1:   52-block  1
    #####:   53:    return -1;
    %%%%%:   53-block  0
        -:   54:}
        -:   55:
